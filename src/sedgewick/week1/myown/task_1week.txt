
Напишите ПРОГРАММУ для ОЦЕНКИ ЗНАЧЕНИЯ ПОРОГА ПЕРКОЛЯЦИИ с помощью моделирования Монте-Карло.
https://coursera.cs.princeton.edu/algs4/assignments/percolation/faq.php

THE MODEL:
Мы моделируем перколяционную систему, используя сетку узлов n на n.
Каждый участок либо ОТКРЫТ, либо ЗАБЛОКИРОВАН (blocked).
ПОЛНЫЙ участок (full site) - это открытый участок,
который МОЖЕТ БЫТЬ подключен к открытому участку в верхнем ряду через цепочку соседних
(слева, справа, вверх, вниз) открытых участков, т.е. только ребром.
Мы говорим, что система просачивается, если в нижнем ряду есть full site участок.
Другими словами, система просачивается, если мы заполняем все открытые участки, подключенные к верхней строке,
и этот процесс заполняет некоторые открытые участки в нижней строке.
(Для примера изолирующих / металлических материалов открытые участки соответствуют металлическим материалам,
так что просачивающаяся система имеет металлический путь сверху вниз с проводящими полными участками.
В примере с пористым веществом открытые участки соответствуют пустому пространству, через которое может протекать вода,
поэтому просачивающаяся система позволяет воде заполнять открытые участки, протекая сверху вниз.)



THE PROBLEM:
В известной научной проблеме исследователей интересует следующий вопрос:
                                                    *****
                        если участки независимо настроены как открытые с вероятностью p
                        (и, следовательно, заблокированы с вероятностью 1 - p), (т.к. всего есть единица)
                        какова вероятность того, что система просачивается?
                                                    *****
Когда p = 0, система не просачивается;
когда p = 1, система просачивается.
На графиках ниже показана зависимость вероятности вакансии участка p от вероятности перколяции для случайной сетки
20Х20 (слева) и случайной сетки 100Х100 (справа).

                                            ...тут 2 картинки...

Когда n достаточно велико, существует пороговое значение p* такое,
что при p < p* случайная сетка n-на-n почти никогда не просачивается,
а когда p > p*, случайная сетка n-на-n почти всегда просачивается ,
МАТЕМАТИЧЕСКОЕ РЕШЕНИЕ ДЛЯ ОПРЕДЕЛЕНИЯ ПОРОГА ПЕРКОЛЯЦИИ p* пока не получено.
Ваша задача - НАПИСАТЬ КОМПЬЮТЕРНУЮ ПРОГРАММУ ДЛЯ ОЦЕНКИ p*.


ТИП ДАННЫХ Percolation (Percolation data type)
Чтобы смоделировать систему перколяции, создайте тип данных Percolation со следующим API:

                                            ...тут код Percolation...
CORNER CASES:
По соглашению индексы строк и столбцов являются целыми числами от 1 до n,
где (1, 1) - левый верхний участок:
генерировать исключение IllegalArgumentException, если какой-либо аргумент
open(), isOpen() или isFull() находится вне его предписанного диапазон.
Бросьте IllegalArgumentException в конструктор, если n ≤ 0.


ТРЕБОВАНИЯ К ПРОИЗВОДИТЕЛЬНОСТИ: (Performance requirements)
Конструктор должен занять время, пропорциональное n^2;
все методы экземпляра должны занимать постоянное время плюс постоянное количество вызовов union() и find().


МОДЕЛИРОВАНИЕ МОНТЕ КАРЛО (Monte Carlo simulation)
Чтобы оценить порог перколяции, рассмотрите следующий вычислительный эксперимент:
                                                *****
1.Инициализируйте все участки, которые нужно заблокировать.
2.Повторите следующие действия, пока система не просочится (p > p*):
    а. Выбирайте участок случайным образом среди всех заблокированных участков.
    б. Откройте участок.
3. ДОЛЯ открытых УЧАСТКОВ, при которых система просачивается, дает оценку порога протекания (p*).
Например, если участки открываются в решетке 20-на-20 (20-by-20) согласно приведенным ниже снимкам,
то наша оценка порога протекания составляет 204/400 = 0,51, поскольку система просачивается при открытии 204-го участке.
                                                *****
                                        ...тут 4 картинки...

Повторяя этот вычислительный эксперимент T раз и усредняя результаты, мы получаем более точную оценку порога протекания.
Пусть xt - доля открытых участков в вычислительном эксперименте t.
Среднее значение выборки X-штрих_сверху дает оценку порога протекания;
стандартное отклонение выборки s;
измеряет резкость порога.
                                        ...далее формула...

Предполагая, что T достаточно велик (скажем, не менее 30),
следующее обеспечивает 95% доверительный интервал для порога протекания:

                                        ...формула для confidenceLo и confidenceHi...

Чтобы выполнить серию вычислительных экспериментов, создайте тип данных PercolationStats со следующим API:

                                        ...тут код PercolationStats...

Бросьте исключение IllegalArgumentException в конструктор, если либо n ≤ 0, либо испытания ≤ 0.


Кроме того, включите метод main(), который принимает два аргумента командной строки n и T,
выполняет T независимых вычислительных экспериментов (обсуждаемых выше) на сетке n-на-n и печатает
среднее значение выборки, стандартное отклонение выборки и 95 % доверительный интервал для порога протекания.
Используйте StdRandom для генерации случайных чисел;
используйте StdStats для вычисления среднего значения выборки и стандартного отклонения выборки.


Теперь реализуйте тип данных Percolation, используя алгоритм взвешенного быстрого объединения в WeightedQuickUnionUF.
Ответьте на вопросы в предыдущем абзаце.


WEB SUBMISSION:
Отправьте файл .zip, содержащий только «Отправить только Percolation.java»
(с использованием взвешенного алгоритма быстрого объединения из WeightedQuickUnionUF) и PercolationStats.java.
Мы предоставим algs4.jar.
Ваша заявка не может вызывать библиотечные функции, за исключением
StdIn, StdOut, StdRandom, StdStats, WeightedQuickUnionUF и java.lang.